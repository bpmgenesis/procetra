ReactSVGPanZoom.propTypes = {
  /**************************************************************************/
  /*  Viewer configuration                                                  */
  /**************************************************************************/

  /**
   *   width of the viewer displayed on screen
   */
  width: PropTypes.number.isRequired,

  /**
  * height of the viewer displayed on screen
  */
  height: PropTypes.number.isRequired,

  /**
  * value of the viewer (current camera view)
  */
  value: PropTypes.oneOfType([
    PropTypes.object,
    PropTypes.shape({
      version: PropTypes.oneOf([2]).isRequired,
      mode: PropTypes.oneOf([MODE_IDLE, MODE_PANNING, MODE_ZOOMING]).isRequired,
      focus: PropTypes.bool.isRequired,
      a: PropTypes.number.isRequired,
      b: PropTypes.number.isRequired,
      c: PropTypes.number.isRequired,
      d: PropTypes.number.isRequired,
      e: PropTypes.number.isRequired,
      f: PropTypes.number.isRequired,
      viewerWidth: PropTypes.number.isRequired,
      viewerHeight: PropTypes.number.isRequired,
      SVGMinX: PropTypes.number.isRequired,
      SVGMinY: PropTypes.number.isRequired,
      SVGWidth: PropTypes.number.isRequired,
      SVGHeight: PropTypes.number.isRequired,
      startX: PropTypes.number,
      startY: PropTypes.number,
      endX: PropTypes.number,
      endY: PropTypes.number,
      miniatureOpen: PropTypes.bool.isRequired,
    })
  ]).isRequired,

  /**
  * handler something changed
  */
  onChangeValue: PropTypes.func.isRequired,

  /**
  * current active tool (TOOL_NONE, TOOL_PAN, TOOL_ZOOM_IN, TOOL_ZOOM_OUT)
  */
  tool: PropTypes.oneOf([TOOL_AUTO, TOOL_NONE, TOOL_PAN, TOOL_ZOOM_IN, TOOL_ZOOM_OUT]).isRequired,

  /**
  * handler tool changed
  */
  onChangeTool: PropTypes.func.isRequired,

  /**************************************************************************/
  /* Customize style                                                        */
  /**************************************************************************/

  /**
  * background of the viewer
  */
  background: PropTypes.string,

  /**
  * background of the svg
  */
  SVGBackground: PropTypes.string,

  /**
  * style of the svg
  */
  SVGStyle: PropTypes.object,

  /**
  * CSS style of the Viewer
  */
  style: PropTypes.object,

  /**
  * className of the Viewer
  */
  className: PropTypes.string,

  /**************************************************************************/
  /* Detect events                                                          */
  /**************************************************************************/

  /**
  * perform zoom operation on mouse scroll
  */
  detectWheel: PropTypes.bool,

  /**
  * perform PAN if the mouse is on viewer border
  */
  detectAutoPan: PropTypes.bool,

  /**
  * perform zoom operation on pinch gesture
  */
  detectPinchGesture: PropTypes.bool,

  /**
  * handler zoom level changed
  */
  onZoom: PropTypes.func,

  /**
  * handler pan action performed
  */
  onPan: PropTypes.func,

  /**
  * handler click
  */
  onClick: PropTypes.func,

  /**
  * handler double click
  */
  onDoubleClick: PropTypes.func,

  /**
  * handler mouseup
  */
  onMouseUp: PropTypes.func,

  /**
  * handler mousemove
  */
  onMouseMove: PropTypes.func,

  /**
  * handler mousedown
  */
  onMouseDown: PropTypes.func,

  /**************************************************************************/
  /* Some advanced configurations                                           */
  /**************************************************************************/

  /**
  * if disabled the user can move the image outside the viewer
  */
  preventPanOutside: PropTypes.bool,

  /**
  * how much scale in or out
  */
  scaleFactor: PropTypes.number,

  /**
  * how much scale in or out on mouse wheel (requires detectWheel enabled)
  */
  scaleFactorOnWheel: PropTypes.number,

  /**
  * maximum amount of scale a user can zoom in to
  */
  scaleFactorMax: PropTypes.number,

  /**
  * minimum amount of a scale a user can zoom out of
  */
  scaleFactorMin: PropTypes.number,

  /**
  * modifier keys //https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState
  */
  modifierKeys: PropTypes.array,

  /**
  * Turn off zoom on double click
  */
  disableDoubleClickZoomWithToolAuto: PropTypes.bool,

  /**************************************************************************/
  /* Miniature configurations                                                 */
  /**************************************************************************/

  /**
  * override miniature component
  */
  customMiniature: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),

  /**
  * miniature props
  */
  miniatureProps: PropTypes.shape({
    position: PropTypes.oneOf([POSITION_NONE, POSITION_RIGHT, POSITION_LEFT]),
    background: PropTypes.string,
    width: PropTypes.number,
    height: PropTypes.number,
  }),

  /**************************************************************************/
  /* Toolbar configurations                                                 */
  /**************************************************************************/

  /**
  * override toolbar component
  */
  customToolbar: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),

  /**
  * toolbar props
  */
  toolbarProps: PropTypes.shape({
    position: PropTypes.oneOf([POSITION_NONE, POSITION_TOP, POSITION_RIGHT, POSITION_BOTTOM, POSITION_LEFT]),
    SVGAlignX: PropTypes.oneOf([ALIGN_CENTER, ALIGN_LEFT, ALIGN_RIGHT]),
    SVGAlignY: PropTypes.oneOf([ALIGN_CENTER, ALIGN_TOP, ALIGN_BOTTOM]),
    activeToolColor: PropTypes.string,
  }),

  /**************************************************************************/
  /* Children Check                                                         */
  /**************************************************************************/
  /**
  * accept only one node SVG
  */
  children: function (props, propName, componentName) {
    // Only accept a single child, of the appropriate type
    //credits: http://www.mattzabriskie.com/blog/react-validating-children
    let prop = props[propName];
    let types = ['svg'];
    if (React.Children.count(prop) !== 1 ||
      types.indexOf(prop.type) === -1) {
      return new Error(
        '`' + componentName + '` ' +
        'should have a single child of the following types: ' +
        ' `' + types.join('`, `') + '`.'
      );
    }
    if (
      (!prop.props.hasOwnProperty('width') || !prop.props.hasOwnProperty('height')) &&
      (!prop.props.hasOwnProperty('viewBox'))
    ) {
      return new Error('SVG should have props `width` and `height` or `viewBox`');
    }

  }
};